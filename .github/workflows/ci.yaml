name: CI Workflow
on:
  workflow_dispatch:
    inputs:
      tag_env:
        description: Select which environment image to create.
        type: choice
        options:
          - dev
          - stage
          - prod
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DEPLOY_REPO_API_TOKEN: ${{ secrets.DEPLOY_REPO_API_TOKEN }}
  EDX_THEME_REPO_API_TOKEN: ${{ secrets.EDX_THEME_REPO_API_TOKEN }}
  AWS-REGION: eu-west-1
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
jobs:
  code_style:
    runs-on: ubuntu-latest
    continue-on-error: true
    # if: ${{ github.event_name }} == 'pull_request' ### to check
    env:
      EDX_THEME_REPO_ID: 674268023
      DEPLOY_REPO_ID: 674235833
      DEPLOY_REPO_BRANCH: main
      PIP_CACHE_DIR: "${{ github.workspace }}/.cache/pip"
      COMPARE_BRANCH: origin/${{ github.event_name.pull_request.base.ref }}
      PIP_ROOT_USER_ACTION: ignore
    steps:
    - uses: actions/checkout@v3.5.0
      with:
        fetch-depth: 0
    - uses: actions/cache@v3.3.1
      with:
        path: |
          .cache/pip
          venv/
        key: default
    - name: Set ownership
      run: |
        # this is to fix GIT not liking owner of the checkout dir
        chown -R $(id -u):$(id -g) $PWD
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Create virtual environment
      run: python -m venv venv
    - name: Activate virtual environment
      run: . venv/bin/activate
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install diff-cover pycodestyle pylint
    - name: Fetch base branch
      run: git fetch origin ${{ github.event_name.pull_request.base.ref }}
    - name: Run code quality checks
      run: |
        diff-quality --violations=pycodestyle --fail-under=80 --compare-branch=origin/master
  lint:
    runs-on: ubuntu-latest
    continue-on-error: true
    # if: ${{ github.event_name }} == 'pull_request'
    env:
      EDX_THEME_REPO_ID: 674268023
      DEPLOY_REPO_ID: 674235833
      DEPLOY_REPO_BRANCH: main
      PIP_CACHE_DIR: "${{ github.workspace }}/.cache/pip"
      COMPARE_BRANCH: origin/${{ github.event_name.pull_request.base.ref }}
    steps:
    - uses: actions/checkout@v3.5.0
      with:
        fetch-depth: 0
    - uses: actions/cache@v3.3.1
      with:
        path: |
          .cache/pip
          venv/
        key: default
    - name: Set ownership
      run: |
        # this is to fix GIT not liking owner of the checkout dir
        chown -R $(id -u):$(id -g) $PWD
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Create virtual environment
      run: python -m venv venv
    - name: Activate virtual environment
      run: . venv/bin/activate
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install diff-cover pycodestyle pylint
    - name: Fetch base branch
      run: git fetch origin ${{ github.event_name.pull_request.base.ref }}
    - name: Run code quality checks
      run: |
        diff-quality --violations=pylint --fail-under=80 --compare-branch=origin/master
  commit_convention:
    needs:
      - code_style
      - lint
    if: github.event_name != 'merge_group'
    runs-on: ubuntu-latest
    continue-on-error: true
    container:
      image: node:16
    steps:
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          key: commitlint-node_modules
          path: node_modules/
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure Git for Safe Directory
        run: git config --global --add safe.directory /__w/K8S-Nutmeg-Platform/K8S-Nutmeg-Platform
      - name: Export NODE_PATH
        run: export NODE_PATH="$XDG_DATA_HOME/yarn/global/node_modules:$XDG_DATA_HOME/npm/lib/node_modules"
      - name: npm install commitlint
        run: |
          bash -c "[[ -d node_modules/ ]] || npm install -g @commitlint/cli @commitlint/config-conventional; exit 0;"
      - name: Lint commits
        run: |
          npx --quiet commitlint --from=${{ github.event.before }} --to=${{ github.sha }} || npx --quiet commitlint --from=${{ github.sha }}~1 --to=${{ github.sha }}
  pre-build:
    needs:
      - code_style
      - lint
      - commit_convention
  #  if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      PLATFORM_TAG: ${{ steps.get-tag.outputs.PLATFORM_TAG }}
    container:
      image: alpine:3.17
    steps:
      - name: Create Theme image tag based on the run id
        id: get-tag
        run: |
          TAG="campus-v.0.0.${GITHUB_RUN_NUMBER}"
          echo $TAG
          echo "PLATFORM_TAG=${TAG}" >> $GITHUB_OUTPUT
  build-dev:
    permissions:
      id-token: write
      contents: read
      packages: read
      repository-projects	: read
    if: inputs.tag_env == 'dev'
    # # if:
    #   # (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/docker')
    # timeout-minutes: 60
    needs: pre-build
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: development_gh
      BASE_IMAGE: 359153448268.dkr.ecr.eu-west-1.amazonaws.com/midlink-edx-platform:${{ github.ref_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3.5.0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS-REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Create tag's prefix
        run: |
          echo "PREFIX=$(echo "${{ inputs.tag_env }}" | head -c 1)" >> $GITHUB_ENV
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: midlink-edx-platform
          IMAGE_TAG: "${{ env.PREFIX }}-${{ needs.pre-build.outputs.PLATFORM_TAG }}"
          BUILD_TYPE: development_gh
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG . -f GH_Dockerfile --build-arg "BUILD_TYPE=$BUILD_TYPE"
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
  build-release:
    permissions:
      id-token: write
      contents: read
      packages: read
      repository-projects	: read
    needs: pre-build
    runs-on: ubuntu-latest
    if: inputs.tag_env == 'prod' || inputs.tag_env == 'stage'
    env:
      EDX_THEME_REPO_ID: 674268023
      DEPLOY_REPO_ID: 674235833
      DEPLOY_REPO_BRANCH: main
      BASE_IMAGE: 359153448268.dkr.ecr.eu-west-1.amazonaws.com/midlink-edx-platform:${{ github.ref_name }}
      AWS_DEFAULT_REGION: eu-west-1
      BUILD_TYPE: release_gh
      
      # # if:
      #   # (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/docker')
      # timeout-minutes: 60
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3.5.0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS-REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Create tag's prefix
        run: |
          echo "PREFIX=$(echo "${{ inputs.tag_env }}" | head -c 1)" >> $GITHUB_ENV
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: midlink-edx-platform
          IMAGE_TAG: "${{ env.PREFIX }}-${{ needs.pre-build.outputs.PLATFORM_TAG }}"
          BUILD_TYPE: release_gh
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG . -f GH_Dockerfile --build-arg "BUILD_TYPE=$BUILD_TYPE" --build-arg "GH_TOKEN=$GH_TOKEN"
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG